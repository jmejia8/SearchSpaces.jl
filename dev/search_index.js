var documenterSearchIndex = {"docs":
[{"location":"api/#API-references","page":"API References","title":"API references","text":"","category":"section"},{"location":"api/","page":"API References","title":"API References","text":"cardinality\nisinbounds\nispermutation\nispermutation\nisinspace\nVariable\n@var","category":"page"},{"location":"api/#SearchSpaces.cardinality","page":"API References","title":"SearchSpaces.cardinality","text":"cardinality(searchspace)\n\nCardinality of the search space.\n\nExample\n\njulia> cardinality(Permutations(5))\n120\n\njulia> cardinality(Bounds(lb = zeros(2), ub = ones(2)))\nInf\n\njulia> cardinality(Bounds(lb = zeros(Int, 2), ub = ones(Int,2)))\n4\n\njulia> mixed = MixedSpace(\n                          :W => Categorical([:red, :green, :blue]),\n                          :X => Permutations(3),\n                          :Y => BitArrays(3),\n                         );\n\njulia> cardinality(mixed)\n144\n\n\n\n\n\n","category":"function"},{"location":"api/#SearchSpaces.isinbounds","page":"API References","title":"SearchSpaces.isinbounds","text":"isinbounds(item, searchspace) --> Bool\n\nDetermine whether an item is in the given searchspace.\n\n\n\n\n\n","category":"function"},{"location":"api/#SearchSpaces.ispermutation","page":"API References","title":"SearchSpaces.ispermutation","text":"ispermutation(item, searchspace) --> Bool\n\nDetermine whether an item is in the given searchspace.\n\n\n\n\n\n","category":"function"},{"location":"api/#SearchSpaces.isinspace","page":"API References","title":"SearchSpaces.isinspace","text":"isinspace(item, searchspace) --> Bool\n\nDetermine whether an item is in the given searchspace.\n\nSee also in.\n\n\n\n\n\n","category":"function"},{"location":"api/#SearchSpaces.Variable","page":"API References","title":"SearchSpaces.Variable","text":"Variable(name, searchspace)\n\nA structure to define a variable in the search space: searchspace.\n\n\n\n\n\n","category":"type"},{"location":"api/#SearchSpaces.@var","page":"API References","title":"SearchSpaces.@var","text":"@var\n\nA macro to define a Variable.\n\n\n\n\n\n","category":"macro"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#k-Permutation-Space","page":"Examples","title":"k-Permutation Space","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Permutations","category":"page"},{"location":"examples/#SearchSpaces.Permutations","page":"Examples","title":"SearchSpaces.Permutations","text":"Permutations(values; k)\nPermutations(k)\n\nDefine a search space defined by permuting the values of size k (k-permutations).\n\n\n\n\n\n","category":"type"},{"location":"examples/","page":"Examples","title":"Examples","text":"Categorical","category":"page"},{"location":"examples/#SearchSpaces.Categorical","page":"Examples","title":"SearchSpaces.Categorical","text":"Categorical(categories)\n\nDefine a search space given by the provided categories (Vector).\n\n\n\n\n\n","category":"function"},{"location":"examples/","page":"Examples","title":"Examples","text":"Permutations(5)\nPermutations([:red, :green, :blue])\nPermutations([:red, :green, :blue, :alpha], 2)","category":"page"},{"location":"examples/#Bit-Arrays","page":"Examples","title":"Bit Arrays","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"BitArrays","category":"page"},{"location":"examples/#SearchSpaces.BitArrays","page":"Examples","title":"SearchSpaces.BitArrays","text":"BitArrays(;dim)\n\nDefine a search space delimited by bit arrays.\n\n\n\n\n\n","category":"type"},{"location":"examples/","page":"Examples","title":"Examples","text":"BitArrays(4)","category":"page"},{"location":"examples/#Bounds-(Box-space)","page":"Examples","title":"Bounds (Box-space)","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Bounds","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Bounds(lb = 1.1, ub = 4.1)\nBounds(lb = zeros(5), ub = ones(5))\nBounds(lb = fill(-10, 3), ub = fill(10, 3))\nBounds(lb = zeros(2), ub = ones(2), rigid=false)","category":"page"},{"location":"examples/#Mixed-Spaces","page":"Examples","title":"Mixed Spaces","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"MixedSpace","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"MixedSpace(:X => Permutations(3), :Y => BitArrays(3), :Z => Bounds(lb = zeros(2), ub = ones(2)))\nMixedSpace(:x => 1:10, :y => [:red, :green], :z => Permutations(1:3))","category":"page"},{"location":"examples/#Built-in-Samplers","page":"Examples","title":"Built-in Samplers","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Grid","category":"page"},{"location":"examples/#SearchSpaces.Grid","page":"Examples","title":"SearchSpaces.Grid","text":"Grid(searchspace; npartitions)\n\nReturn an iterator over the given searchspace.\n\nThe npartitions controls the number of partitions for each axis when searchspace isa Bounds (3 by default).\n\nExamples\n\njulia> for x in Grid(Permutations([:red, :green, :blue]))\n           @show x\n       end\nx = [:red, :green, :blue]\nx = [:red, :blue, :green]\nx = [:green, :red, :blue]\nx = [:green, :blue, :red]\nx = [:blue, :red, :green]\nx = [:blue, :green, :red]\n\njulia> for x in Grid(Bounds(lb=[-1.0, -1], ub=[1, 0.0]), npartitions=3)\n           @show x\n       end\nx = [-1.0, -1.0]\nx = [0.0, -1.0]\nx = [1.0, -1.0]\nx = [-1.0, -0.5]\nx = [0.0, -0.5]\nx = [1.0, -0.5]\nx = [-1.0, 0.0]\nx = [0.0, 0.0]\nx = [1.0, 0.0]\n\njulia> mixed = MixedSpace(\n                                 :W => Categorical([:red, :green, :blue]),\n                                 :X => Permutations(2),\n                                 :Y => BitArrays(2),\n                                );\n\njulia> collect(Grid(mixed))\n24-element Vector{Any}:\n Dict{Symbol, Any}(:W => :red, :X => [1, 2], :Y => Bool[0, 0])\n Dict{Symbol, Any}(:W => :green, :X => [1, 2], :Y => Bool[0, 0])\n Dict{Symbol, Any}(:W => :blue, :X => [1, 2], :Y => Bool[0, 0])\n Dict{Symbol, Any}(:W => :red, :X => [2, 1], :Y => Bool[0, 0])\n Dict{Symbol, Any}(:W => :green, :X => [2, 1], :Y => Bool[0, 0])\n Dict{Symbol, Any}(:W => :blue, :X => [2, 1], :Y => Bool[0, 0])\n â‹®\n Dict{Symbol, Any}(:W => :blue, :X => [2, 1], :Y => Bool[0, 1])\n Dict{Symbol, Any}(:W => :red, :X => [1, 2], :Y => Bool[1, 1])\n Dict{Symbol, Any}(:W => :green, :X => [1, 2], :Y => Bool[1, 1])\n Dict{Symbol, Any}(:W => :blue, :X => [1, 2], :Y => Bool[1, 1])\n Dict{Symbol, Any}(:W => :red, :X => [2, 1], :Y => Bool[1, 1])\n Dict{Symbol, Any}(:W => :green, :X => [2, 1], :Y => Bool[1, 1])\n Dict{Symbol, Any}(:W => :blue, :X => [2, 1], :Y => Bool[1, 1])\n\n\n\n\n\n","category":"type"},{"location":"examples/","page":"Examples","title":"Examples","text":"AtRandom","category":"page"},{"location":"examples/#SearchSpaces.AtRandom","page":"Examples","title":"SearchSpaces.AtRandom","text":"AtRandom(searchspace;rng)\n\nDefine a random iterator for the search space.\n\n\n\n\n\n","category":"type"},{"location":"#SearchSpaces.jl","page":"Index","title":"SearchSpaces.jl","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"(Image: Aqua QA)","category":"page"},{"location":"","page":"Index","title":"Index","text":"Just a simple Julia package to define search spaces for, perhaps, optimization.","category":"page"},{"location":"#Search-Spaces","page":"Index","title":"Search Spaces","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Implemented search spaces:","category":"page"},{"location":"","page":"Index","title":"Index","text":"Bounds{T}: Defined by bounds for numeric values T.\nPermutations(dim): Space containing permutations with dimension dim.\nBitArrays(dim): Space containing bit arrays with dimension dim.\nMixedSpace(:space => AtomicSearchSpace...): Search spaces composed of other search spaces.","category":"page"},{"location":"#API","page":"Index","title":"API","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"cardinality: to get the cardinality of the search space.\nAtomicSearchSpace is an abstract type to define primitive search spaces.","category":"page"}]
}
